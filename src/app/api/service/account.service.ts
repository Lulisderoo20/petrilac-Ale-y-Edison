/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AccountBuyer } from '../model/accountBuyer';
import { ResponseMessage } from '../model/responseMessage';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccountService {

    protected basePath = '/private/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Load coupon for a account seller
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAccountSellerAndLoadCoupon(body?: User, observe?: 'body', reportProgress?: boolean): Observable<ResponseMessage>;
    public createAccountSellerAndLoadCoupon(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseMessage>>;
    public createAccountSellerAndLoadCoupon(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseMessage>>;
    public createAccountSellerAndLoadCoupon(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseMessage>(`${this.basePath}/account/load-coupon-seller`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load coupon for a final consumer
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadCoupon(body?: AccountBuyer, observe?: 'body', reportProgress?: boolean): Observable<ResponseMessage>;
    public loadCoupon(body?: AccountBuyer, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseMessage>>;
    public loadCoupon(body?: AccountBuyer, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseMessage>>;
    public loadCoupon(body?: AccountBuyer, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseMessage>(`${this.basePath}/account/load-coupon`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verification a account seller
     * 
     * @param userId 
     * @param accountId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendEmailConfirmation(userId: number, accountId: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseMessage>;
    public sendEmailConfirmation(userId: number, accountId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseMessage>>;
    public sendEmailConfirmation(userId: number, accountId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseMessage>>;
    public sendEmailConfirmation(userId: number, accountId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling sendEmailConfirmation.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling sendEmailConfirmation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<ResponseMessage>(`${this.basePath}/account/send-confirmation/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(accountId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verification a account seller
     * 
     * @param userId 
     * @param accountId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verificationAccount(userId: number, accountId: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseMessage>;
    public verificationAccount(userId: number, accountId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseMessage>>;
    public verificationAccount(userId: number, accountId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseMessage>>;
    public verificationAccount(userId: number, accountId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling verificationAccount.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling verificationAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<ResponseMessage>(`${this.basePath}/account/verification-account/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(accountId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verification a account seller
     * 
     * @param userId 
     * @param accountId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public verificationAccountByAdmin(userId: number, accountId: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseMessage>;
     public verificationAccountByAdmin(userId: number, accountId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseMessage>>;
     public verificationAccountByAdmin(userId: number, accountId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseMessage>>;
     public verificationAccountByAdmin(userId: number, accountId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
         if (userId === null || userId === undefined) {
             throw new Error('Required parameter userId was null or undefined when calling verificationAccountByAdmin.');
         }
         if (accountId === null || accountId === undefined) {
             throw new Error('Required parameter accountId was null or undefined when calling verificationAccountByAdmin.');
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set("Accept", httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         let consumes: string[] = [
         ];
 
         return this.httpClient.post<ResponseMessage>(`${this.basePath}/account/verification-account-by-admin/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(accountId))}`,
             null,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

}
