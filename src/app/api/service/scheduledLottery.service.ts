/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ScheduledLottery } from '../model/scheduledLottery';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { Winner } from '../model/winner';
import { ResponseMessage } from '../model/responseMessage';


@Injectable()
export class ScheduledLotteryService {

    protected basePath = '/private/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Load coupon for a final consumer
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'body', reportProgress?: boolean): Observable<ScheduledLottery>;
    public createScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduledLottery>>;
    public createScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduledLottery>>;
    public createScheduleLottery(token: string, body?: ScheduledLottery, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ScheduledLottery>(`${this.basePath}/scheduled-lottery/create`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load coupon for a final consumer
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'body', reportProgress?: boolean): Observable<ScheduledLottery>;
    public editScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduledLottery>>;
    public editScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduledLottery>>;
    public editScheduleLottery(token: string, body?: ScheduledLottery, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ScheduledLottery>(`${this.basePath}/scheduled-lottery/edit`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the locations by province id
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllScheduledLottery(token: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ScheduledLottery>>;
    public findAllScheduledLottery(token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScheduledLottery>>>;
    public findAllScheduledLottery(token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScheduledLottery>>>;
    public findAllScheduledLottery(token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ScheduledLottery>>(`${this.basePath}/scheduled-lottery/find-all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the locations by province id
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findScheduledLotteryValid(observe?: 'body', reportProgress?: boolean): Observable<ScheduledLottery>;
    public findScheduledLotteryValid(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduledLottery>>;
    public findScheduledLotteryValid(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduledLottery>>;
    public findScheduledLotteryValid(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ScheduledLottery>(`${this.basePath}/scheduled-lottery/find-scheduled-lottery-valid`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Execute a scheduled lottery
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public executeScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'body', reportProgress?: boolean): Observable<ResponseMessage>;
     public executeScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseMessage>>;
     public executeScheduleLottery(token: string, body?: ScheduledLottery, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseMessage>>;
     public executeScheduleLottery(token: string, body?: ScheduledLottery, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set("Accept", httpHeaderAcceptSelected);
         }
 
         headers = headers.set("Authorization", "Baerer " + token);
         
         // to determine the Content-Type header
         let consumes: string[] = [
         ];
         let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set("Content-Type", httpContentTypeSelected);
         }
 
         return this.httpClient.post<ResponseMessage>(`${this.basePath}/scheduled-lottery/execute`,
             body,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

    /**
     * Find all the scheduleds
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findWinnersWeekend(observe?: 'body', reportProgress?: boolean): Observable<Array<Winner>>;
    public findWinnersWeekend(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Winner>>>;
    public findWinnersWeekend(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Winner>>>;
    public findWinnersWeekend(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Winner>>(`${this.basePath}/scheduled-lottery/find-winners-weekend`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all the scheduleds
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public findWinnersBuyers(observe?: 'body', reportProgress?: boolean): Observable<Array<Winner>>;
     public findWinnersBuyers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Winner>>>;
     public findWinnersBuyers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Winner>>>;
     public findWinnersBuyers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set("Accept", httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         let consumes: string[] = [
         ];
 
         return this.httpClient.get<Array<Winner>>(`${this.basePath}/scheduled-lottery/find-winners-buyers`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

     /**
     * 
     * @param lotteryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public publish(token: string, lotteryId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public publish(token: string, lotteryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public publish(token: string, lotteryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public publish(token: string, lotteryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        
        if (lotteryId === null || lotteryId === undefined) {
            throw new Error('Required parameter lotteryId was null or undefined when calling publish.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/scheduled-lottery/publish/${encodeURIComponent(String(lotteryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * @param lotteryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public findWinnersBySchduledLotteryId(token: string, lotteryId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Winner>>;
     public findWinnersBySchduledLotteryId(token: string, lotteryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Winner>>>;
     public findWinnersBySchduledLotteryId(token: string, lotteryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Winner>>>;
     public findWinnersBySchduledLotteryId(token: string, lotteryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
         
         if (lotteryId === null || lotteryId === undefined) {
             throw new Error('Required parameter lotteryId was null or undefined when calling findWinnersBySchduledLotteryId.');
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set("Accept", httpHeaderAcceptSelected);
         }
 
         headers = headers.set("Authorization", "Baerer " + token);
 
         // to determine the Content-Type header
         let consumes: string[] = [
         ];
 
         return this.httpClient.get<Array<Winner>>(`${this.basePath}/scheduled-lottery/find-winners-by-scheduled/${encodeURIComponent(String(lotteryId))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

     
    /**
     * 
     * @param lotteryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findWinnerBuyersBySchduledLotteryId(token: string, lotteryId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Winner>>;
    public findWinnerBuyersBySchduledLotteryId(token: string, lotteryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Winner>>>;
    public findWinnerBuyersBySchduledLotteryId(token: string, lotteryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Winner>>>;
    public findWinnerBuyersBySchduledLotteryId(token: string, lotteryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        
        if (lotteryId === null || lotteryId === undefined) {
            throw new Error('Required parameter lotteryId was null or undefined when calling findWinnerBuyersBySchduledLotteryId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Winner>>(`${this.basePath}/scheduled-lottery/find-winners-buyers-by-scheduled/${encodeURIComponent(String(lotteryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
