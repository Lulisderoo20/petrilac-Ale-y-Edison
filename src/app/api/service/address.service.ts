/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BusinessName } from '../model/businessName';
import { Location } from '../model/location';
import { Province } from '../model/province';
import { ProvinceLocationZipCode } from '../model/provinceLocationZipCode';
import { ZipCode } from '../model/zipCode';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AddressService {

    protected basePath = '/private/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Find the locations by province id
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllReason(observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessName>>;
    public findAllReason(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessName>>>;
    public findAllReason(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessName>>>;
    public findAllReason(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<BusinessName>>(`${this.basePath}/address/find-all-reason`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the Businessname by province id
     * 
     * @param provinceId 
     * @param locationId 
     * @param zipCodeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findBusinessNameForProvinceLocationZipcode(provinceId: number, locationId: number, zipCodeId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessName>>;
    public findBusinessNameForProvinceLocationZipcode(provinceId: number, locationId: number, zipCodeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessName>>>;
    public findBusinessNameForProvinceLocationZipcode(provinceId: number, locationId: number, zipCodeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessName>>>;
    public findBusinessNameForProvinceLocationZipcode(provinceId: number, locationId: number, zipCodeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling findBusinessNameForProvinceLocationZipcode.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling findBusinessNameForProvinceLocationZipcode.');
        }
        if (zipCodeId === null || zipCodeId === undefined) {
            throw new Error('Required parameter zipCodeId was null or undefined when calling findBusinessNameForProvinceLocationZipcode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<BusinessName>>(`${this.basePath}/address/find-reason/${encodeURIComponent(String(provinceId))}/${encodeURIComponent(String(locationId))}/${encodeURIComponent(String(zipCodeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all location
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLocation(observe?: 'body', reportProgress?: boolean): Observable<Array<Location>>;
    public findLocation(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Location>>>;
    public findLocation(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Location>>>;
    public findLocation(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Location>>(`${this.basePath}/address/find-location`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the locations by province id
     * 
     * @param provinceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLocationById(provinceId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Location>>;
    public findLocationById(provinceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Location>>>;
    public findLocationById(provinceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Location>>>;
    public findLocationById(provinceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling findLocationById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Location>>(`${this.basePath}/address/find-location/${encodeURIComponent(String(provinceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the locations by province id
     * 
     * @param provinceId 
     * @param code zipcode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLocationByProvinceIdAndCode(provinceId: number, code: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Location>>;
    public findLocationByProvinceIdAndCode(provinceId: number, code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Location>>>;
    public findLocationByProvinceIdAndCode(provinceId: number, code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Location>>>;
    public findLocationByProvinceIdAndCode(provinceId: number, code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling findLocationByProvinceIdAndCode.');
        }
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling findLocationByProvinceIdAndCode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Location>>(`${this.basePath}/address/find-location/${encodeURIComponent(String(provinceId))}/${encodeURIComponent(String(code))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all provinces
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findProvince(observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public findProvince(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public findProvince(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public findProvince(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Province>>(`${this.basePath}/address/find-province`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all zip codes
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findZipCode(observe?: 'body', reportProgress?: boolean): Observable<Array<ZipCode>>;
    public findZipCode(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ZipCode>>>;
    public findZipCode(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ZipCode>>>;
    public findZipCode(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ZipCode>>(`${this.basePath}/address/find-zip-code`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all zip codes
     * 
     * @param provinceId 
     * @param locationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findZipCodeByProvinceAndLocation(provinceId: number, locationId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ZipCode>>;
    public findZipCodeByProvinceAndLocation(provinceId: number, locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ZipCode>>>;
    public findZipCodeByProvinceAndLocation(provinceId: number, locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ZipCode>>>;
    public findZipCodeByProvinceAndLocation(provinceId: number, locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling findZipCodeByProvinceAndLocation.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling findZipCodeByProvinceAndLocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<ZipCode>>(`${this.basePath}/address/find-zip-code/${encodeURIComponent(String(provinceId))}/${encodeURIComponent(String(locationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search province and location by zipcode
     * 
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchZipcode(code: string, observe?: 'body', reportProgress?: boolean): Observable<ProvinceLocationZipCode>;
    public searchZipcode(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProvinceLocationZipCode>>;
    public searchZipcode(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProvinceLocationZipCode>>;
    public searchZipcode(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling searchZipcode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProvinceLocationZipCode>(`${this.basePath}/address/search-zipcode/${encodeURIComponent(String(code))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
