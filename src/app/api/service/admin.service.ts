/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { Observable }                                        from 'rxjs';
import { AccountSellerDetailPage } from '../model/accountSellerDetailPage';
import { AccountSellerFilter } from '../model/accountSellerFilter';
import { CuoponDetailPage } from '../model/cuoponDetailPage';
import { CuoponFilter } from '../model/cuoponFilter';
import { BASE_PATH }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { AccountSellerExport } from '../model/accountSellerExport';


@Injectable()
export class AdminService {

    protected basePath = '/private/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Search seller by filter for account
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchAccountSeller(token: string, body?: AccountSellerFilter, observe?: 'body', reportProgress?: boolean): Observable<AccountSellerDetailPage>;
    public searchAccountSeller(token: string, body?: AccountSellerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountSellerDetailPage>>;
    public searchAccountSeller(token: string, body?: AccountSellerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountSellerDetailPage>>;
    public searchAccountSeller(token: string, body?: AccountSellerFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AccountSellerDetailPage>(`${this.basePath}/admin/search-account-seller`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search counpon by filter
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCoupon(token: string, body?: CuoponFilter, observe?: 'body', reportProgress?: boolean): Observable<CuoponDetailPage>;
    public searchCoupon(token: string, body?: CuoponFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CuoponDetailPage>>;
    public searchCoupon(token: string, body?: CuoponFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CuoponDetailPage>>;
    public searchCoupon(token: string, body?: CuoponFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CuoponDetailPage>(`${this.basePath}/admin/search-coupon`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search counpon by filter for account
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCouponByAccount(token: string, body?: CuoponFilter, observe?: 'body', reportProgress?: boolean): Observable<CuoponDetailPage>;
    public searchCouponByAccount(token: string, body?: CuoponFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CuoponDetailPage>>;
    public searchCouponByAccount(token: string, body?: CuoponFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CuoponDetailPage>>;
    public searchCouponByAccount(token: string, body?: CuoponFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CuoponDetailPage>(`${this.basePath}/admin/search-coupon-by-account`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * Search buyer by filter for account
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
      public searchAccountBuyer(token: string, body?: AccountSellerFilter, observe?: 'body', reportProgress?: boolean): Observable<AccountSellerDetailPage>;
      public searchAccountBuyer(token: string, body?: AccountSellerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountSellerDetailPage>>;
      public searchAccountBuyer(token: string, body?: AccountSellerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountSellerDetailPage>>;
      public searchAccountBuyer(token: string, body?: AccountSellerFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
  
        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AccountSellerDetailPage>(`${this.basePath}/admin/search-account-buyer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

   public searchExport(token: string, body?: AccountSellerFilter, observe?: 'body', reportProgress?: boolean): Observable<Array<AccountSellerExport>>;
   public searchExport(token: string, body?: AccountSellerFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AccountSellerExport>>>;
   public searchExport(token: string, body?: AccountSellerFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AccountSellerExport>>>;
   public searchExport(token: string, body?: AccountSellerFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.ms-excel'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        headers = headers.set("Authorization", "Baerer " + token);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<AccountSellerExport>>(`${this.basePath}/admin/search/export`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
   }

}
